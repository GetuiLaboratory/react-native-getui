{"version":3,"sources":["../../../src/StyleNormalizer/ShorthandsNormalizerFactory.js"],"names":["createShorthand","name","type","_","isUndefined","SIDES","CORNERS","HORIZONTAL","VERTICAL","LEFT","RIGHT","TOP","BOTTOM","TOP_RIGHT","BOTTOM_RIGHT","TOP_LEFT","BOTTOM_LEFT","ShorthandsNormalizerFactory","createNormalizersMap","createAllSidesNormalizer","createAllCornersNormalizer","createHorizontalSidesNormalizer","createVerticalSidesNormalizer","prop","shorthand","suffix","val","normalizerCreator","getNormalizerCreator"],"mappings":"qwBAAA,8B;;AAEA,GAAMA,iBAAkB,QAAlBA,gBAAkB,CAACC,IAAD,CAAOC,IAAP,QAAiB,CAAED,SAAF,CAAQC,KAAMC,iBAAEC,WAAF,CAAcF,IAAd,EAAsBD,IAAtB,CAA6BC,IAA3C,CAAjB,EAAxB;;AAEO,GAAMG,qBAAQL,gBAAgB,OAAhB,CAAyB,EAAzB,CAAd;AACA,GAAMM,yBAAUN,gBAAgB,SAAhB,CAA2B,EAA3B,CAAhB;AACA,GAAMO,+BAAaP,gBAAgB,YAAhB,CAAnB;AACA,GAAMQ,2BAAWR,gBAAgB,UAAhB,CAAjB;;AAEA,GAAMS,mBAAO,MAAb;AACA,GAAMC,qBAAQ,OAAd;AACA,GAAMC,iBAAM,KAAZ;AACA,GAAMC,uBAAS,QAAf;AACA,GAAMC,6BAAY,UAAlB;AACA,GAAMC,mCAAe,aAArB;AACA,GAAMC,2BAAW,SAAjB;AACA,GAAMC,iCAAc,YAApB,C;;;;;;;AAODC,2B;AACJ,sCAAc;AACZ,KAAKC,oBAAL;AACGb,MAAMJ,IADT,CACgB,KAAKkB,wBADrB;AAEGb,QAAQL,IAFX,CAEkB,KAAKmB,0BAFvB;AAGGb,WAAWN,IAHd,CAGqB,KAAKoB,+BAH1B;AAIGb,SAASP,IAJZ,CAImB,KAAKqB,6BAJxB;;AAMD,C;;AAEwBC,I,CAAMC,S,CAAwB,IAAbC,OAAa,2DAAJ,EAAI;AACrD,MAAO,UAACC,GAAD;AACJH,KAAOd,IAAP,CAAcgB,MADV,CACmBC,GADnB;AAEJH,KAAOb,KAAP,CAAee,MAFX,CAEoBC,GAFpB;AAGJH,KAAOZ,GAAP,CAAac,MAHT,CAGkBC,GAHlB;AAIJH,KAAOX,MAAP,CAAgBa,MAJZ,CAIqBC,GAJrB,QAAP;;AAMD,C;;AAE0BH,I,CAAMC,S,CAAwB,IAAbC,OAAa,2DAAJ,EAAI;AACvD,MAAO,UAACC,GAAD;AACJH,KAAOP,WAAP,CAAqBS,MADjB,CAC0BC,GAD1B;AAEJH,KAAOT,YAAP,CAAsBW,MAFlB,CAE2BC,GAF3B;AAGJH,KAAOR,QAAP,CAAkBU,MAHd,CAGuBC,GAHvB;AAIJH,KAAOV,SAAP,CAAmBY,MAJf,CAIwBC,GAJxB,SAAP;;AAMD,C;;AAE+BH,I,CAAM;AACpC,MAAO,UAACG,GAAD;AACJH,KAAOd,IADH,CACUiB,GADV;AAEJH,KAAOb,KAFH,CAEWgB,GAFX,SAAP;;AAID,C;;AAE6BH,I,CAAM;AAClC,MAAO,UAACG,GAAD;AACJH,KAAOZ,GADH,CACSe,GADT;AAEJH,KAAOX,MAFH,CAEYc,GAFZ,SAAP;;AAID,C;;AAEoBF,S,CAAW;AAC9B,MAAO,MAAKN,oBAAL,CAA0BM,UAAUvB,IAApC,CAAP;AACD,C;;AAEgBsB,I,CAAMC,S,CAAWC,M,CAAQ;AACxC,GAAME,mBAAoB,KAAKC,oBAAL,CAA0BJ,SAA1B,CAA1B;AACA,MAAOG,mBAAkBJ,IAAlB,CAAwBC,SAAxB,CAAmCC,MAAnC,CAAP;AACD,C;;;AAGY,GAAIR,4BAAJ,E","file":"ShorthandsNormalizerFactory.js","sourcesContent":["import _ from 'lodash';\n\nconst createShorthand = (name, type) => ({ name, type: _.isUndefined(type) ? name : type });\n\nexport const SIDES = createShorthand('Sides', '');\nexport const CORNERS = createShorthand('Corners', '');\nexport const HORIZONTAL = createShorthand('Horizontal');\nexport const VERTICAL = createShorthand('Vertical');\n\nexport const LEFT = 'Left';\nexport const RIGHT = 'Right';\nexport const TOP = 'Top';\nexport const BOTTOM = 'Bottom';\nexport const TOP_RIGHT = 'TopRight';\nexport const BOTTOM_RIGHT = 'BottomRight';\nexport const TOP_LEFT = 'TopLeft';\nexport const BOTTOM_LEFT = 'BottomLeft';\n\n// Shorthands normalizers creators.\n// This creators provide standard normalizer used in most cases.\n// When style property has any of this shorthands, use this creators\n// to create shorthand normalizer.\n\nclass ShorthandsNormalizerFactory {\n  constructor() {\n    this.createNormalizersMap = {\n      [SIDES.name]: this.createAllSidesNormalizer,\n      [CORNERS.name]: this.createAllCornersNormalizer,\n      [HORIZONTAL.name]: this.createHorizontalSidesNormalizer,\n      [VERTICAL.name]: this.createVerticalSidesNormalizer,\n    };\n  }\n\n  createAllSidesNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + LEFT + suffix]: val,\n      [prop + RIGHT + suffix]: val,\n      [prop + TOP + suffix]: val,\n      [prop + BOTTOM + suffix]: val,\n    });\n  }\n\n  createAllCornersNormalizer(prop, shorthand, suffix = '') {\n    return (val) => ({\n      [prop + BOTTOM_LEFT + suffix]: val,\n      [prop + BOTTOM_RIGHT + suffix]: val,\n      [prop + TOP_LEFT + suffix]: val,\n      [prop + TOP_RIGHT + suffix]: val,\n    });\n  }\n\n  createHorizontalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + LEFT]: val,\n      [prop + RIGHT]: val,\n    });\n  }\n\n  createVerticalSidesNormalizer(prop) {\n    return (val) => ({\n      [prop + TOP]: val,\n      [prop + BOTTOM]: val,\n    });\n  }\n\n  getNormalizerCreator(shorthand) {\n    return this.createNormalizersMap[shorthand.name];\n  }\n\n  createNormalizer(prop, shorthand, suffix) {\n    const normalizerCreator = this.getNormalizerCreator(shorthand);\n    return normalizerCreator(prop, shorthand, suffix);\n  }\n}\n\nexport default new ShorthandsNormalizerFactory();\n"]}